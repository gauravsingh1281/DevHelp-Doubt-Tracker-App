{
  "info": {
    "name": "DevHelp - Doubt Tracker App API",
    "description": "Complete API collection for DevHelp Doubt Tracker Application with authentication, doubts management, and comments system",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "student_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "mentor_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "doubt_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "comment_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register Student",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.msg).to.eql(\"Registration successful\");",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Student\",\n  \"email\": \"student@example.com\",\n  \"password\": \"password123\",\n  \"role\": \"student\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Register Mentor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.msg).to.eql(\"Registration successful\");",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Jane Mentor\",\n  \"email\": \"mentor@example.com\",\n  \"password\": \"password123\",\n  \"role\": \"mentor\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Login Student",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token and user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user.role).to.eql('student');",
                  "});",
                  "",
                  "// Save student token for future requests",
                  "var jsonData = pm.response.json();",
                  "pm.collectionVariables.set('student_token', jsonData.token);",
                  "pm.collectionVariables.set('auth_token', jsonData.token);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"student@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Login Mentor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token and user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user.role).to.eql('mentor');",
                  "});",
                  "",
                  "// Save mentor token for future requests",
                  "var jsonData = pm.response.json();",
                  "pm.collectionVariables.set('mentor_token', jsonData.token);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"mentor@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "Doubts Management",
      "item": [
        {
          "name": "Create Doubt (Student)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use student token",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('student_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has doubt data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "    pm.expect(jsonData.title).to.eql('JavaScript Array Methods');",
                  "});",
                  "",
                  "// Save doubt ID for future requests",
                  "var jsonData = pm.response.json();",
                  "pm.collectionVariables.set('doubt_id', jsonData._id);"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"JavaScript Array Methods\",\n  \"description\": \"I'm having trouble understanding the difference between map, filter, and reduce methods in JavaScript. Can someone explain with examples?\",\n  \"subject\": \"JavaScript\",\n  \"priority\": \"medium\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/doubts",
              "host": ["{{base_url}}"],
              "path": ["doubts"]
            }
          }
        },
        {
          "name": "Create Doubt with Screenshot (Student)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use student token",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('student_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has doubt data with screenshot\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "    pm.expect(jsonData.title).to.eql('React Component Error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "title",
                  "value": "React Component Error",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "Getting an error when trying to render this component. Please check the screenshot.",
                  "type": "text"
                },
                {
                  "key": "subject",
                  "value": "React",
                  "type": "text"
                },
                {
                  "key": "priority",
                  "value": "high",
                  "type": "text"
                },
                {
                  "key": "screenshot",
                  "type": "file",
                  "src": [],
                  "disabled": true
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/doubts",
              "host": ["{{base_url}}"],
              "path": ["doubts"]
            }
          }
        },
        {
          "name": "Get My Doubts (Student)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use student token",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('student_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/doubts/my",
              "host": ["{{base_url}}"],
              "path": ["doubts", "my"]
            }
          }
        },
        {
          "name": "Get All Doubts (Mentor)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use mentor token",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('mentor_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/doubts",
              "host": ["{{base_url}}"],
              "path": ["doubts"]
            }
          }
        },
        {
          "name": "Update Doubt (Student)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use student token",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('student_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Doubt updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.title).to.eql('Updated: JavaScript Array Methods');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated: JavaScript Array Methods\",\n  \"description\": \"I'm having trouble understanding the difference between map, filter, and reduce methods in JavaScript. Can someone explain with examples? Added more details after research.\",\n  \"priority\": \"high\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/doubts/{{doubt_id}}",
              "host": ["{{base_url}}"],
              "path": ["doubts", "{{doubt_id}}"]
            }
          }
        },
        {
          "name": "Mark Doubt as Resolved (Student)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use student token",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('student_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Doubt marked as resolved\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('resolved');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/doubts/{{doubt_id}}/resolve",
              "host": ["{{base_url}}"],
              "path": ["doubts", "{{doubt_id}}", "resolve"]
            }
          }
        },
        {
          "name": "Toggle Doubt Status (Student/Mentor)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use student token",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('student_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Status toggled successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{base_url}}/doubts/{{doubt_id}}/toggle-status",
              "host": ["{{base_url}}"],
              "path": ["doubts", "{{doubt_id}}", "toggle-status"]
            }
          }
        },
        {
          "name": "Delete Doubt (Student)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use student token",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('student_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Doubt deleted successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.msg).to.include('deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/doubts/{{doubt_id}}",
              "host": ["{{base_url}}"],
              "path": ["doubts", "{{doubt_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Comments Management",
      "item": [
        {
          "name": "Add Comment (Student)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use student token",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('student_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Comment created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "    pm.expect(jsonData.text).to.eql('Thanks for the help! This is very useful.');",
                  "});",
                  "",
                  "// Save comment ID for future requests",
                  "var jsonData = pm.response.json();",
                  "pm.collectionVariables.set('comment_id', jsonData._id);"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Thanks for the help! This is very useful.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/comments/{{doubt_id}}",
              "host": ["{{base_url}}"],
              "path": ["comments", "{{doubt_id}}"]
            }
          }
        },
        {
          "name": "Add Reply Comment (Mentor)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use mentor token",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('mentor_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Reply created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "    pm.expect(jsonData.text).to.eql('Here is a detailed explanation of array methods with examples.');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Here is a detailed explanation of array methods with examples.\",\n  \"parentComment\": \"{{comment_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/comments/{{doubt_id}}",
              "host": ["{{base_url}}"],
              "path": ["comments", "{{doubt_id}}"]
            }
          }
        },
        {
          "name": "Get Comments for Doubt",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use student token",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('student_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/comments/{{doubt_id}}",
              "host": ["{{base_url}}"],
              "path": ["comments", "{{doubt_id}}"]
            }
          }
        },
        {
          "name": "Edit Comment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use student token (comment author)",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('student_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Comment updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.text).to.eql('Updated: Thanks for the help! This is very useful and clear.');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Updated: Thanks for the help! This is very useful and clear.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/comments/{{comment_id}}",
              "host": ["{{base_url}}"],
              "path": ["comments", "{{comment_id}}"]
            }
          }
        },
        {
          "name": "Delete Comment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use student token (comment author)",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('student_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Comment deleted successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.msg).to.include('deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/comments/{{comment_id}}",
              "host": ["{{base_url}}"],
              "path": ["comments", "{{comment_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Login with Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.msg).to.eql('Invalid credentials');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"wrong@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Access Protected Route without Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has authorization error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.msg).to.include('token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/doubts/my",
              "host": ["{{base_url}}"],
              "path": ["doubts", "my"]
            }
          }
        },
        {
          "name": "Student Accessing Mentor Route",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use student token to access mentor-only route",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('student_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Response has access denied message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.msg).to.include('Access denied');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/doubts",
              "host": ["{{base_url}}"],
              "path": ["doubts"]
            }
          }
        },
        {
          "name": "Create Doubt with Missing Fields",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use student token",
                  "pm.collectionVariables.set('auth_token', pm.collectionVariables.get('student_token'));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has validation error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.msg).to.include('required');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Missing title field\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/doubts",
              "host": ["{{base_url}}"],
              "path": ["doubts"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Running API request to:', pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test('Response has proper content type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ]
}
